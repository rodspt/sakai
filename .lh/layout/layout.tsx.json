{
    "sourceFile": "layout/layout.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1706140434214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706141572732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { classNames } from 'primereact/utils';\n import AppFooter from './AppFooter';\n import AppSidebar from './AppSidebar';\n import AppTopbar from './AppTopbar';\n-import AppConfig from './AppConfig';\n+//import AppConfig from './AppConfig';\n import { LayoutContext } from './context/layoutcontext';\n import { PrimeReactContext } from 'primereact/api';\n import { ChildContainerProps, LayoutState, AppTopbarRef } from '@/types';\n import { usePathname, useSearchParams } from 'next/navigation';\n"
                }
            ],
            "date": 1706140434213,
            "name": "Commit-0",
            "content": "/* eslint-disable react-hooks/exhaustive-deps */\n'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { useEventListener, useMountEffect, useUnmountEffect } from 'primereact/hooks';\nimport React, { useContext, useEffect, useRef } from 'react';\nimport { classNames } from 'primereact/utils';\nimport AppFooter from './AppFooter';\nimport AppSidebar from './AppSidebar';\nimport AppTopbar from './AppTopbar';\nimport AppConfig from './AppConfig';\nimport { LayoutContext } from './context/layoutcontext';\nimport { PrimeReactContext } from 'primereact/api';\nimport { ChildContainerProps, LayoutState, AppTopbarRef } from '@/types';\nimport { usePathname, useSearchParams } from 'next/navigation';\n\nconst Layout = ({ children }: ChildContainerProps) => {\n    const { layoutConfig, layoutState, setLayoutState } = useContext(LayoutContext);\n    const { setRipple } = useContext(PrimeReactContext);\n    const topbarRef = useRef<AppTopbarRef>(null);\n    const sidebarRef = useRef<HTMLDivElement>(null);\n    const [bindMenuOutsideClickListener, unbindMenuOutsideClickListener] = useEventListener({\n        type: 'click',\n        listener: (event) => {\n            const isOutsideClicked = !(\n                sidebarRef.current?.isSameNode(event.target as Node) ||\n                sidebarRef.current?.contains(event.target as Node) ||\n                topbarRef.current?.menubutton?.isSameNode(event.target as Node) ||\n                topbarRef.current?.menubutton?.contains(event.target as Node)\n            );\n\n            if (isOutsideClicked) {\n                hideMenu();\n            }\n        }\n    });\n\n    const pathname = usePathname();\n    const searchParams = useSearchParams();\n    useEffect(() => {\n        hideMenu();\n        hideProfileMenu();\n    }, [pathname, searchParams]);\n\n    const [bindProfileMenuOutsideClickListener, unbindProfileMenuOutsideClickListener] = useEventListener({\n        type: 'click',\n        listener: (event) => {\n            const isOutsideClicked = !(\n                topbarRef.current?.topbarmenu?.isSameNode(event.target as Node) ||\n                topbarRef.current?.topbarmenu?.contains(event.target as Node) ||\n                topbarRef.current?.topbarmenubutton?.isSameNode(event.target as Node) ||\n                topbarRef.current?.topbarmenubutton?.contains(event.target as Node)\n            );\n\n            if (isOutsideClicked) {\n                hideProfileMenu();\n            }\n        }\n    });\n\n    const hideMenu = () => {\n        setLayoutState((prevLayoutState: LayoutState) => ({\n            ...prevLayoutState,\n            overlayMenuActive: false,\n            staticMenuMobileActive: false,\n            menuHoverActive: false\n        }));\n        unbindMenuOutsideClickListener();\n        unblockBodyScroll();\n    };\n\n    const hideProfileMenu = () => {\n        setLayoutState((prevLayoutState: LayoutState) => ({\n            ...prevLayoutState,\n            profileSidebarVisible: false\n        }));\n        unbindProfileMenuOutsideClickListener();\n    };\n\n    const blockBodyScroll = (): void => {\n        if (document.body.classList) {\n            document.body.classList.add('blocked-scroll');\n        } else {\n            document.body.className += ' blocked-scroll';\n        }\n    };\n\n    const unblockBodyScroll = (): void => {\n        if (document.body.classList) {\n            document.body.classList.remove('blocked-scroll');\n        } else {\n            document.body.className = document.body.className.replace(new RegExp('(^|\\\\b)' + 'blocked-scroll'.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n        }\n    };\n\n    useEffect(() => {\n        if (layoutState.overlayMenuActive || layoutState.staticMenuMobileActive) {\n            bindMenuOutsideClickListener();\n        }\n\n        layoutState.staticMenuMobileActive && blockBodyScroll();\n    }, [layoutState.overlayMenuActive, layoutState.staticMenuMobileActive]);\n\n    useEffect(() => {\n        if (layoutState.profileSidebarVisible) {\n            bindProfileMenuOutsideClickListener();\n        }\n    }, [layoutState.profileSidebarVisible]);\n\n    useUnmountEffect(() => {\n        unbindMenuOutsideClickListener();\n        unbindProfileMenuOutsideClickListener();\n    });\n\n    const containerClass = classNames('layout-wrapper', {\n        'layout-overlay': layoutConfig.menuMode === 'overlay',\n        'layout-static': layoutConfig.menuMode === 'static',\n        'layout-static-inactive': layoutState.staticMenuDesktopInactive && layoutConfig.menuMode === 'static',\n        'layout-overlay-active': layoutState.overlayMenuActive,\n        'layout-mobile-active': layoutState.staticMenuMobileActive,\n        'p-input-filled': layoutConfig.inputStyle === 'filled',\n        'p-ripple-disabled': !layoutConfig.ripple\n    });\n\n    return (\n        <React.Fragment>\n            <div className={containerClass}>\n                <AppTopbar ref={topbarRef} />\n                <div ref={sidebarRef} className=\"layout-sidebar\">\n                    <AppSidebar />\n                </div>\n                <div className=\"layout-main-container\">\n                    <div className=\"layout-main\">{children}</div>\n                    <AppFooter />\n                </div>\n                {/*<AppConfig />*/}\n                <div className=\"layout-mask\"></div>\n            </div>\n        </React.Fragment>\n    );\n};\n\nexport default Layout;\n"
        }
    ]
}